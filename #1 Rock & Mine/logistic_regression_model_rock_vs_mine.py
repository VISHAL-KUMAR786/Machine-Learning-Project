# -*- coding: utf-8 -*-
"""Logistic regression model rock vs mine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/191F0ml0ic5KHw8SAP-L7zg-9Lfb6y_Pt

Importing dependinces
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and Data processing"""

# loading the dataset into pandas dataframe
s_d = pd.read_csv('/content/sonar data.csv',header=None)
# s_d = sonar_data

s_d.head()

# number of rows and columns
s_d.shape

# describe statistical measures of data
s_d.describe()

s_d[60].value_counts()
# M -> Mine , R -> Rock

s_d.groupby(60).mean()

# seprating data and label ( supervised learning )
x = s_d.drop(columns = 60, axis = 1)
y = s_d[60]

print(x)
print(y)

"""Training and test data"""

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.1,stratify=y,random_state=1)
# 0.1 -> 10% to be test data
# stratify for considering equal number of mine and rock
# data will be splited in same way as our data -> random_state

print(x.shape,x_train.shape,x_test.shape)

print(x_train)
print(y_train)

"""Model Traning --> Logistic Regression Model"""

model = LogisticRegression()

# traning the logistic regression model with training data
model.fit(x_train,y_train)

"""Model Evaluation"""

#accuracy on training data (70% accuracy is good)
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy on training data ',training_data_accuracy)

#accuracy for test data
x_test_prediction = model.predict(x_test)
testing_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy on testing data ',testing_data_accuracy)

"""Making a predicting system"""

input_data = (0.0286,0.0453,0.0277,0.0174,0.0384,0.0990,0.1201,0.1833,0.2105,0.3039,0.2988,0.4250,0.6343,0.8198,1.0000,0.9988,0.9508,0.9025,0.7234,0.5122,0.2074,0.3985,0.5890,0.2872,0.2043,0.5782,0.5389,0.3750,0.3411,0.5067,0.5580,0.4778,0.3299,0.2198,0.1407,0.2856,0.3807,0.4158,0.4054,0.3296,0.2707,0.2650,0.0723,0.1238,0.1192,0.1089,0.0623,0.0494,0.0264,0.0081,0.0104,0.0045,0.0014,0.0038,0.0013,0.0089,0.0057,0.0027,0.0051,0.0062)

# changing input_data from list to numpy array
input_array = np.asarray(input_data)

# reshape np array as we are predicting for one instance
input_reshaped = input_array.reshape(1,-1)

prediction = model.predict(input_reshaped)

if(prediction[0] == 'R'):
  print("Rock ü™® ",prediction)
else:
  print("Mine ‚öíÔ∏è ",prediction)

