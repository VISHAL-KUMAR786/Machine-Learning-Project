# -*- coding: utf-8 -*-
"""vector machine supervide learning ( diabetes pridicition ).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11qij2hpNpQWurlWogCSP37ObN6pIb_UY

Importing the Dependices
"""

import numpy as np
import pandas as pd
from sklearn import *
from sklearn.preprocessing import StandardScaler # it will put data in common range
from sklearn.model_selection import train_test_split
from sklearn import svm # select vector machine
from sklearn.metrics import accuracy_score

"""Data collection and analysis
PIMA Diabetes Dataset





"""

# loading diabetes dataset to pandas data frame
d_d = pd.read_csv('/content/diabetes.csv')
# diabetes_dataset = d_d

# help
pd.read_csv?

# printing first 5 row of dataset
d_d.head()

# number of rows and colums in this dataset
d_d.shape

# getting statictical meausure of data
d_d.describe()

d_d['Outcome'].value_counts()
# 0 --> non_diabetic 
# 1 --> diabetic

d_d.groupby('Outcome').mean()

# seprating data and labels
x = d_d.drop(columns='Outcome',axis=1)
y = d_d['Outcome']

print(x)
print(y)

"""Data standirized"""

scaler = StandardScaler()

scaler.fit(x)

standirized_data_me = scaler.transform(x)

print(standirized_data_me)

x = standirized_data_me
y = d_d['Outcome']

print(x,y,end="\n")

"""Train Test Split"""

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

classifier = svm.SVC(kernel='linear')

# traning support vector machine classifier
classifier.fit(x_train,y_train)

"""Model Evaluation"""

# accuracy score on training data
x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)

print('Accuracy of training data ', training_data_accuracy)

# accuracy score on testing data
x_test_prediction = classifier.predict(x_test)
testing_data_accuracy = accuracy_score(x_test_prediction,y_test)

print('Accuracy of testing data ', testing_data_accuracy)
# if the accuracy of train data is very high and test data is very low is know as  overhidding

"""Making a prediction data"""

# from numpy.core.fromnumeric import std
input_data = (17,163,72,41,114,40.9,0.817,47)
# 2,88,74,19,53,29,0.229,22,0
# 17,163,72,41,114,40.9,0.817,47,1 

# changing input data into numpy array
np_array = np.asarray(input_data)

# reshape array as we are predicting for one instance
input_shapped = np_array.reshape(1,-1)

# standardized data
std_data = scaler.transform(input_shapped)

predicition = classifier.predict(std_data)
print(std_data,predicition)

if(predicition == 0):
  print("Non Diabetics ðŸ˜Ž")
else:
  print("Diabetics ðŸ¥²")