# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hTcUs0He_NIRoGEokfJTDLp83t05HGJt

Importing the Dependicies
"""

import numpy as np # array
import pandas as pd # pre processing
import seaborn as sns # data visualization or math.plot
from sklearn.model_selection import train_test_split
from sklearn import svm # vector machine
from sklearn.metrics import accuracy_score

"""Data collection and pre processing"""

# loading dataset to pandas Dataframe
l_d = pd.read_csv('/content/Dataset.csv')

type(l_d)

# printing first 5 rows of dataframe
l_d.head()

# number of rows and columns in dataset
l_d.shape

# statistical measure 
l_d.describe()

# dealing the missing value
l_d.isnull().sum()

# dropping missing values
l_d = l_d.dropna()

l_d.isnull().sum()

# label encloding 
l_d.replace({"Loan_Status":{'Y':1,'N':0}},inplace=True) # dict data type

l_d.head()

# dependent column values
l_d['Dependents'].value_counts()

# replacing the value of 3+ to 4
l_d = l_d.replace(to_replace='3+',value=4)

# dependant value
l_d['Dependents'].value_counts()

"""Data visualization"""

# Education and loan status
sns.countplot(x='Education',hue='Loan_Status',data=l_d)

# marital status & loan status
sns.countplot(x='Married',hue='Loan_Status',data=l_d)

sns.countplot(x='Gender',hue='Loan_Status',data=l_d)

# convert text into numerical values
l_d.replace({"Married":{'Yes':1,'No':0},"Gender":{'Male':1,'Female':0}
            ,"Self_Employed":{'Yes':1,'No':0},"Married":{'Yes':1,'No':0},
            "Property_Area":{'Rural':0,'Semiurban':1,'Urban':2},
            "Education":{'Graduate':1,'Not Graduate':0}},inplace=True)

l_d.head()

# seprating data and label
x = l_d.drop(columns=['Loan_Status','Loan_ID'],axis=1)
# axis = 1 , for removing a column
# axis = 0 , for removing a row
y = l_d['Loan_Status']
print(x)
print(y)

"""Train Test Split"""

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

"""Traning the model , using support vector machine"""

classifier = svm.SVC(kernel='linear')

# training the support vector machine
classifier.fit(x_train,y_train)

"""Model Evaluation"""

# accuracy score in training data
train_data = classifier.predict(x_train)
train_data_predict = accuracy_score(y_train,train_data)
print('Accuracy on train data : ',train_data_predict)

# accuracy score in testing data
test_data = classifier.predict(x_test)
test_data_predict = accuracy_score(y_test,test_data)
print('Accuracy on test data : ',test_data_predict)

"""Making a predictive system"""

input_data = [[1,1,1,1,0,4583,1508,128,360,1,0],[1,1,0,1,0,5821,0,144,360,1,2],[1,1,4,1,0,3036,2504,158,360,0,1]]
# ,Male,Yes,0,Graduate,No,5821,0,144,360,1,Urban,Y
# Male,Yes,3+,Graduate,No,3036,2504,158,360,0,Semiurban
input_array = np.asarray(input_data)
input_reshaped = input_array.reshape(1,-1)
prediction = classifier.predict(input_data)

for i in prediction:
  if i == 1:
    print("Loan is Approved üî•")
  else:
    print("Next Time ‚ù§")

